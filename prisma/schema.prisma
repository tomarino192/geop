generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  email               String     @unique
  password            String
  role                String     @default("GUEST")
  lang                String     @default("ru")
  failedLoginAttempts Int        @default(0)
  accountLocked       Boolean    @default(false)
  businesses          Business[]
  logs                Log[]
}

model Business {
  id            String    @id @default(uuid())
  name          String
  ownerId       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  type          String?
  catalogType   String?
  catalogLink   String?
  catalogApiKey String?
  faqLink       String?
  promoLink     String?
  phone         String?
  geo           String?
  style         String?
  targetAction  String?
  workingDays   String[]
  startTime     String?
  endTime       String?
  workSaturday  Boolean?  @default(false)
  startTimeSat  String?
  endTimeSat    String?
  workSunday    Boolean?  @default(false)
  startTimeSun  String?
  endTimeSun    String?
  owner         User      @relation(fields: [ownerId], references: [id])
  chatbots      Chatbot[]
}

model Chatbot {
  id              String   @id @default(uuid())
  name            String
  businessId      String
  moduleIds       String[]
  mlEnabled       Boolean? @default(false)
  paymentMethods  String[]
  templateKey     String?
  botWorkingDays  String[]
  botStartTime    String?
  botEndTime      String?
  botWorkSaturday Boolean? @default(false)
  botStartTimeSat String?
  botEndTimeSat   String?
  botWorkSunday   Boolean? @default(false)
  botStartTimeSun String?
  botEndTimeSun   String?
  deliveryOptions Json[]
  business        Business @relation(fields: [businessId], references: [id])
  modules         Module[] @relation("ChatbotModules")
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  status    String
  timestamp DateTime @default(now())
  details   String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Module {
  id         String    @id @default(uuid())
  name       String
  config     Json
  chatbotIds String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  chatbots   Chatbot[] @relation("ChatbotModules")
}
