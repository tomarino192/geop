// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  email               String     @unique
  password            String
  role                String     @default("GUEST")
  lang                String     @default("ru")
  failedLoginAttempts Int        @default(0)
  accountLocked       Boolean    @default(false)
  businesses          Business[]
  logs                Log[]
}

model Business {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  ownerId       String   @db.ObjectId
  owner         User     @relation(fields: [ownerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatbots      Chatbot[]
  type          String?
  catalogType   String?
  catalogLink   String?
  catalogApiKey String?
  faqLink       String?
  promoLink     String?
  phone         String?
  geo           String?
  style         String?
  targetAction  String?
  workingDays   String[] // массив будних дней
  startTime     String?  // "09:00"
  endTime       String?  // "18:00"
  workSaturday  Boolean? @default(false)
  startTimeSat  String?
  endTimeSat    String?
  workSunday    Boolean? @default(false)
  startTimeSun  String?
  endTimeSun    String?
}

model Chatbot {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  businessId       String   @db.ObjectId
  business         Business @relation(fields: [businessId], references: [id])
  moduleIds        String[] @db.ObjectId
  modules          Module[] @relation("ChatbotModules", fields: [moduleIds], references: [id])
  mlEnabled        Boolean? @default(false)
  paymentMethods   String[]
  deliveryOptions  String[]
  templateKey      String?
  botWorkingDays   String[]
  botStartTime     String?
  botEndTime       String?
  botWorkSaturday  Boolean? @default(false)
  botStartTimeSat  String?
  botEndTimeSat    String?
  botWorkSunday    Boolean? @default(false)
  botStartTimeSun  String?
  botEndTimeSun    String?
}


model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  status    String
  timestamp DateTime @default(now())
  details   String?
}

model Module {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  config     Json
  chatbotIds String[]  @db.ObjectId
  chatbots   Chatbot[] @relation("ChatbotModules", fields: [chatbotIds], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
